1️⃣ Usando Funções Estáticas dentro de Program.cs
Se você só quer testar um código sem criar classes separadas, você pode simplesmente colocar funções estáticas dentro do arquivo Program.cs. Aqui está um exemplo simples:

using System;

class Program
{
    static void Main()
    {
        ExibirMensagem(); // Chamando a função diretamente
    }

    static void ExibirMensagem()
    {
        Console.WriteLine("Olá, isso é um teste!");
    }
}
💡 Vantagem:
Você não precisa criar outra classe. O código já roda diretamente no arquivo principal.

2️⃣ Usando Scripts .csx (Estilo Java)
Se você deseja testar C# sem criar um projeto completo, igual ao que acontece em Java, use arquivos de script com a extensão .csx. Isso permite que você escreva código diretamente sem a necessidade de definir a função Main() ou classes.

Exemplo de código:

string nome = "Naruto";
int idade = 17;

Console.WriteLine($"Nome: {nome}, Idade: {idade}");
Para rodar o script, você pode usar o seguinte comando no terminal:

dotnet script meuarquivo.csx
💡 Vantagem:
Funciona como o Java, sem precisar criar classes ou a função Main().

3️⃣ Usando Top-Level Statements (C# 9+)
Desde o C# 9, você pode escrever código diretamente no arquivo sem precisar da função Main(). Isso facilita o processo de testes rápidos e é útil para estudos, assim como em Java.

Exemplo de código:

Console.WriteLine("Hello World!");

int Soma(int a, int b)
{
    return a + b;
}

Console.WriteLine(Soma(5, 3));
📌 Para rodar no terminal: dotnet run
💡 Vantagem:
Código mais limpo e rápido para testar, sem a necessidade de definir uma função Main().

4️⃣ Chamar Funções Diretamente no Final do Arquivo
No caso dos scripts .csx, você pode chamar diretamente funções no final do arquivo. Aqui está um exemplo para ilustrar isso:

using System;

class Variaveis
{
    public static void VariaveisNaruto()
    {
        // Variáveis
        string ninja = "Naruto";
        string vila = "Konoha";
        string sensei = "Kakashi";
        int idade = 17;
        bool hokage = false;
        char rank = 'S';

        Console.WriteLine("Ninja : " + ninja);
        Console.WriteLine("Vila  : " + vila);
        Console.WriteLine("Sensei: " + sensei);
        Console.WriteLine("Rank  : " + rank);
        Console.WriteLine("Idade : " + idade);
        Console.WriteLine("Hokage: " + hokage);
    }
}

// 🔥 Chamando o método no final do arquivo
Variaveis.VariaveisNaruto();
Agora, ao rodar o comando dotnet script Variaveis.csx, ele executará a função VariaveisNaruto() e imprimirá os resultados no console. 🚀

5️⃣ Comando para Executar Scripts
Se você deseja rodar o script .csx, use o comando abaixo no terminal:

dotnet script Variaveis.csx
Aqui está o que cada parte faz:

dotnet: Referência à linguagem C#.
script: Comando para rodar scripts.
Variaveis.csx: O nome do arquivo de script que você quer rodar.
Obs: Não precisa ficar buildando o projeto toda vez!

6️⃣ Importando Funções de Outros Arquivos (Para Organização)
Outra abordagem é criar funções em arquivos separados e importá-las para o Program.cs. Aqui está um exemplo de como fazer isso:

Program.cs:

using System;

class Program
{
    static void Main()
    {
        // Chama o método de outro arquivo
        Variaveis.VariaveisNaruto(); // Chama o método do arquivo Variaveis.cs
    }
}
Neste exemplo, você está chamando a função VariaveisNaruto() de um arquivo separado chamado Variaveis.cs. Isso permite que você mantenha o código mais organizado.